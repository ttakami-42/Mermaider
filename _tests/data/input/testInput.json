{
    "ft_strlcpy": "#include <stdio.h>\n\nsize_t\tft_strlen(const char *str)\n{\n\tsize_t\ti;\n\n\ti = 0;\n\twhile (str[i] != '\\0')\n\t\ti++;\n\treturn (i);\n}\n\nsize_t\tft_strlcpy(char *dst, const char *src, size_t size)\n{\n\tsize_t\ti;\n\n\ti = 0;\n\tif (size > 0)\n\t{\n\t\twhile (src[i] != '\\0' && i < (size - 1))\n\t\t{\n\t\t\tdst[i] = src[i];\n\t\t\ti++;\n\t\t}\n\t\tdst[i] = '\\0';\n\t}\n\treturn (ft_strlen(src));\n}\n\nint main()\n{\n\tchar *src = \"1234567890\";\n\tchar dst[50];\n\tint i = ft_strlcpy(dst, src, 11);\n\n\tprintf(\"[%s] is %d.\\n\", dst, i);\n}\n",
    "ft_strlen": "#include <stdio.h>\n\nsize_t\tft_strlen(const char *str)\n{\n\tsize_t\ti;\n\n\ti = 0;\n\twhile (str[i] != '\\0')\n\t\ti++;\n\treturn (i);\n}\n\nint main()\n{\n\tchar *str = \"1234567890\";\n\tint i = ft_strlen(str);\n\n\tprintf(\"[%s] is %d.\\n\", str, i);\n}\n",
    "ft_memcmp": "#include <stdio.h>\n\nint\tft_memcmp(const void *s1, const void *s2, size_t len)\n{\n\twhile (len-- > 0)\n\t{\n\t\tif (*(unsigned char *)s1 != *(unsigned char *)s2)\n\t\t\treturn (*(unsigned char *)s1 - *(unsigned char *)s2);\n\t\ts1++;\n\t\ts2++;\n\t}\n\treturn (0);\n}\n\nint main()\n{\n\tchar *str1 = \"abcdefghijk\";\n\tchar *str2 = \"ghi\";\n\tint i = ft_memcmp(str1, str2, 20);\n\n\tif (i > 0)\n\t\tprintf(\"%s is greater than %s\\n\", str1, str2);\n\telse if (i < 0)\n\t\tprintf(\"%s is less than %s\\n\", str1, str2);\n\telse\n\t\tprintf(\"%s is equal to %s\\n\", str1, str2);\n}\n",
    "ft_strchr": "#include <stdio.h>\n\nchar\t*ft_strchr(const char *str, int c)\n{\n\twhile (*str != '\\0')\n\t{\n\t\tif (*str == (const char)c)\n\t\t\treturn ((char *)str);\n\t\tstr++;\n\t}\n\tif ((const char)c == '\\0')\n\t\treturn ((char *)str);\n\treturn (NULL);\n}\n\nint main()\n{\n\tchar *str = \"1234567890\";\n\tchar c = '5';\n\tchar *ptr = ft_strchr(str, c);\n\n\tprintf(\"%s\\n\", ptr);\n}\n",
    "ft_bzero": "#include <stdio.h>\n\nvoid\t*ft_memset(void *dst, int val, size_t len)\n{\n\tunsigned char\t*ptr;\n\n\tptr = dst;\n\twhile (len-- > 0)\n\t\t*ptr++ = val;\n\treturn (dst);\n}\n\nvoid\tft_bzero(void *s, size_t len)\n{\n\tft_memset(s, 0, len);\n}\n\nint main()\n{\n\tchar str[] = \"1234567890\";\n\tint i = 0;\n\n\tft_bzero(str, 5);\n\twhile (i < 10)\n\t{\n\t\tif (str[i] == '\\0')\n\t\t\tprintf(\"0\\n\");\n\t\telse\n\t\t\tprintf(\"%c\\n\", str[i]);\n\t\ti++;\n\t}\n}\n",
    "ft_memcpy": "#include <stdio.h>\n\nvoid\t*ft_memcpy(void *dst, const void *src, size_t len)\n{\n\tunsigned char\t*ptr;\n\n\tptr = dst;\n\tif (dst == src)\n\t\treturn (dst);\n\twhile (len-- > 0)\n\t\t*ptr++ = *(unsigned char *)src++;\n\treturn (dst);\n}\n\nint main ()\n{\n\tchar *src = \"1234567890\";\n\tchar dest[50];\n\t\n\tft_memcpy(dest, src, 11);\n\tprintf(\"copied string : %s\\n\", dest);\n\treturn (0);\n}\n",
    "ft_strrchr": "#include <stdio.h>\n\nchar\t*ft_strrchr(const char *str, int c)\n{\n\tconst char\t*ptr;\n\n\tptr = NULL;\n\twhile (1)\n\t{\n\t\tif (*(str) == (const char)c)\n\t\t\tptr = str;\n\t\tif (*(str) == '\\0')\n\t\t\tbreak ;\n\t\tstr++;\n\t}\n\treturn ((char *)ptr);\n}\n\nint main()\n{\n\tchar *str = \"1234567890\";\n\tchar c = '5';\n\tchar *ptr = ft_strrchr(str, c);\n\n\tprintf(\"%s\\n\", ptr);\n}\n",
    "ft_memchr": "#include <stdio.h>\n\nvoid\t*ft_memchr(const void *s, int c, size_t len)\n{\n\twhile (len-- > 0)\n\t{\n\t\tif (*(unsigned char *)s == (unsigned char)c)\n\t\t\treturn ((void *)s);\n\t\ts++;\n\t}\n\treturn (NULL);\n}\n\nint main()\n{\n\tchar *str = \"1234567890\";\n\tchar c = '5';\n\tchar *ptr = ft_memchr(str, c, 5);\n\n\tprintf(\"%s\\n\", ptr);\n}\n",
    "ft_memset": "#include <stdio.h>\n\nvoid\t*ft_memset(void *dst, int val, size_t len)\n{\n\tunsigned char\t*ptr;\n\n\tptr = dst;\n\twhile (len-- > 0)\n\t\t*ptr++ = val;\n\treturn (dst);\n}\n\nint main()\n{\n\tchar str[] = \"1234567890\";\n\tchar *ptr = ft_memset(str, 'a', 5);\n\n\tprintf(\"%s\\n\", ptr);\n}\n",
    "ft_strncmp": "#include <stdio.h>\n\nint\tft_strncmp(const char *s1, const char *s2, size_t len)\n{\n\twhile (len && *s1 && (*s1 == *s2))\n\t{\n\t\ts1++;\n\t\ts2++;\n\t\tlen--;\n\t}\n\tif (len == 0)\n\t\treturn (0);\n\telse\n\t\treturn (*(unsigned char *) s1 - *(unsigned char *) s2);\n}\n\nint main()\n{\n\tchar *str1 = \"abcdefghijk\";\n\tchar *str2 = \"ghi\";\n\tint i = ft_strncmp(str1, str2, 20);\n\tif (i > 0)\n\t\tprintf(\"%s is greater than %s\\n\", str1, str2);\n\telse if (i < 0)\n\t\tprintf(\"%s is less than %s\\n\", str1, str2);\n\telse\n\t\tprintf(\"%s is equal to %s\\n\", str1, str2);\n}\n"
}